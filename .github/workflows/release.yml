name: Release CI/CD

on:
  push:
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io
  OWNER: ${{ github.repository_owner }}
  IMAGE_API: api-backend
  IMAGE_WEB: web-frontend
  HELM_CHART_DIR: .
  HELM_PACKAGE_NAME: mvp

jobs:
  build-and-push-images:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version from tag
        id: vars
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Build and push API Backend
        uses: docker/build-push-action@v5
        with:
          context: ./api-backend
          file: ./api-backend/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.OWNER }}/${{ env.IMAGE_API }}:${{ steps.vars.outputs.VERSION }}
            ${{ env.REGISTRY }}/${{ env.OWNER }}/${{ env.IMAGE_API }}:latest

      - name: Build and push Web Frontend
        uses: docker/build-push-action@v5
        with:
          context: ./web-frontend
          file: ./web-frontend/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.OWNER }}/${{ env.IMAGE_WEB }}:${{ steps.vars.outputs.VERSION }}
            ${{ env.REGISTRY }}/${{ env.OWNER }}/${{ env.IMAGE_WEB }}:latest

  package-and-release-helm:
    name: Package & Release Helm Chart
    runs-on: ubuntu-latest
    needs: build-and-push-images

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.14.0

      - name: Extract version from tag
        id: vars
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Patch Chart.yaml & values.yaml with version
        run: |
          VERSION=${{ steps.vars.outputs.VERSION }}
          sed -i "s/^version: .*/version: ${VERSION}/" Chart.yaml
          sed -i "s/version: [0-9.]\+/version: ${VERSION}/g" Chart.yaml
          find . -name values.yaml | while read f; do
            sed -i "s/tag: \".*\"/tag: \"${VERSION}\"/g" "$f"
          done
          find . -name Chart.yaml | grep -v '^./Chart.yaml$' | while read f; do
            sed -i "s/^version: .*/version: ${VERSION}/" "$f"
          done

      - name: Patch image repositories and tags
        run: |
          VERSION=${{ steps.vars.outputs.VERSION }}
          OWNER=${{ github.repository_owner }}
          REPO=$(basename $GITHUB_REPOSITORY)
          find . -name values.yaml | while read f; do
            sed -i "s|repository: .*api-backend|repository: ghcr.io/${OWNER}/${REPO}/api-backend|g" "$f"
            sed -i "s|repository: .*web-frontend|repository: ghcr.io/${OWNER}/${REPO}/web-frontend|g" "$f"
            sed -i "s/tag: \".*\"/tag: \"${VERSION}\"/g" "$f"
          done

      - name: Package Helm chart
        run: |
          helm dependency update ${{ env.HELM_CHART_DIR }}
          helm package ${{ env.HELM_CHART_DIR }} --version ${{ steps.vars.outputs.VERSION }}

      - name: Generate changelog
        id: changelog
        run: |
          echo "## Changelog" > RELEASE_CHANGELOG.md
          git log $(git describe --tags --abbrev=0 HEAD^)..HEAD --oneline >> RELEASE_CHANGELOG.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: "Release ${{ github.ref_name }}"
          body_path: RELEASE_CHANGELOG.md
          files: |
            ./${{ env.HELM_PACKAGE_NAME }}-${{ steps.vars.outputs.VERSION }}.tgz